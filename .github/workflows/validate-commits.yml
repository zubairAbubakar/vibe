name: Validate Conventional Commits

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate conventional commits
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const { context } = require('@actions/github');
            // Get commits in the PR
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const conventionalPattern = /^(feat|merge|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?\s.+/;
            const validCommits = [];
            const invalidCommits = [];
            commits.data.forEach(commit => {
              const message = commit.commit.message.split('\\n')[0]; // Get first line only
              if (conventionalPattern.test(message)) {
                validCommits.push(message);
              } else {
                invalidCommits.push(message);
              }
            });
            // Create a comment with validation results
            const validationMessage = invalidCommits.length > 0
              ? `## ⚠️ Conventional Commit Validation
            **` + invalidCommits.length + ` commit(s) do not follow conventional commit format:**
            ` + invalidCommits.map(msg => `- \`${msg}\``).join('\\n') + `
            **Conventional commit format:** \`type(scope): description\`
            **Valid types:** feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert
            **Examples:**
            - \`feat: add user authentication\`
            - \`fix(api): resolve null pointer exception\`
            - \`docs: update README with setup instructions\`
            **` + validCommits.length + ` commit(s) are properly formatted** ✅`
              : `## ✅ Conventional Commit Validation Passed
            All ` + validCommits.length + ` commit(s) follow the conventional commit format!`;
            // Find existing validation comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            const existingComment = comments.data.find(comment =>
              comment.body.includes('Conventional Commit Validation')
            );
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: validationMessage
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: validationMessage
              });
            }
            // Set exit code for CI status
            if (invalidCommits.length > 0) {
              console.log(`Found ${invalidCommits.length} invalid commit(s)`);
              process.exit(1);
            } else {
              console.log(`All ${validCommits.length} commits are valid`);
            }
